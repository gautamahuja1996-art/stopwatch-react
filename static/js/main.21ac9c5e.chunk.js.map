{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","hour","setHour","min","setMin","second","setSec","mSecond","setMsecond","stop","setStop","useEffect","interval","clearInterval","setInterval","style","textAlign","marginTop","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMA4FeA,MAzFf,WAGE,MAAyBC,mBAAS,GAAlC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAuBF,mBAAS,GAAhC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA+BN,mBAAS,GAAxC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAyBR,oBAAS,GAAlC,mBAAOS,EAAP,KAAcC,EAAd,KAkEA,OA5CAC,qBAAU,WAER,IAAIC,EAAW,KAmCb,OAlCGH,EA+BDI,cAAcD,GA9BhBA,EAAWE,aAAY,WAEjBX,EAAO,KAETD,EAAQD,EAAO,GACfG,EAAO,GACPS,cAAcD,IAGZP,EAAU,KAEZD,EAAOD,EAAM,GACbG,EAAO,GACPO,cAAcD,IAGZL,EAAW,KAEbD,EAAOD,EAAS,GAChBG,EAAW,GACXK,cAAcD,IAGZL,GAAW,IAEbC,EAAWD,EAAU,KAErB,IAME,WACJM,cAAcD,OAalB,cANA,CAMA,OAAKG,MAAS,CAACC,UAAY,SAAWC,UAAY,SAAlD,UACE,+BAAKhB,EAAL,MAAcE,EAAd,MAAsBE,EAAtB,MAAiCE,KACjC,wBAAQW,QAxEI,WAEdR,GAAQ,IAsEN,mBACA,wBAAQQ,QAnEG,WAEbR,GAAQ,IAiEN,kBACA,wBAAQQ,QA/DI,WAEdhB,EAAQ,GACRE,EAAO,GACPE,EAAO,GACPE,EAAW,IA0DT,uBC3ESW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.21ac9c5e.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n\n  /* variables to be used */\n  const [hour , setHour] = useState(0);\n  const [min , setMin] = useState(0);\n  const [second , setSec] = useState(0);\n  const [mSecond , setMsecond] = useState(0);\n  const [stop , setStop] = useState(false)\n\n\n  const onStart = () =>\n  {\n    setStop(false);\n    //setMsecond(mSecond + 1);\n  }\n\n  const onStop = () =>\n  {\n    setStop(true);\n  }\n\n  const onReset = () =>\n  {\n    setHour(0);\n    setMin(0);\n    setSec(0);\n    setMsecond(0);\n  }\n\n  useEffect(() => {\n\n    let interval = null;\n    if (!stop)\n      interval = setInterval(() => {\n\n        if (min  > 59)\n        {\n          setHour(hour + 1);\n          setMin(0);\n          clearInterval(interval);\n        }\n\n        if (second  > 59)\n        {\n          setMin(min + 1);\n          setSec(0);\n          clearInterval(interval);\n        }\n\n        if (mSecond  > 99)\n        {\n          setSec(second + 1);\n          setMsecond(0);\n          clearInterval(interval);\n        }\n\n        if (mSecond <= 99)\n        {\n          setMsecond(mSecond + 1);\n        }\n      } , 10)\n      \n      else{\n        clearInterval(interval);\n      }\n\n      return() => {\n        clearInterval(interval)\n      }\n  }\n  )\n\n\n  return (\n    /* \n    making the buttons in the center and a margin of 100 px from top \n    onStart function to be executed when Start button is clicked\n\n    \n    */\n    <div style = {{textAlign : 'center' , marginTop : '100px'}}>\n      <h1>{hour} : {min} : {second} : {mSecond}</h1>\n      <button onClick = {onStart}>Start</button> \n      <button onClick = {onStop}>Stop</button>\n      <button onClick = {onReset}>Reset</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}